<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the LDAP API module.
 */

/**
 * Implementation of hook_install().
 */
function ldap_servers_install() {
  variable_set('ldap_servers_encryption','none');
  variable_set('ldap_servers_require_ssl_for_credentails',0);
  
  if (! ($key = variable_get('ldap_servers_encrypt_key', NULL))) {
    require_once('ldap_servers.encryption.inc');
    $key = ldap_servers_random_salt(10);
    variable_set('ldap_servers_encrypt_key', $key);
  }
  
}

/**
 * Implementation of hook_uninstall().
 */
function ldap_servers_uninstall() {
  variable_del('ldap_servers_encryption');
  variable_del('ldap_servers_require_ssl_for_credentails');
 // require_once('LdapServerAdmin.class.php');
 // $servers = LdapServerAdmin::getLdapServerObjects(NULL, NULL, 'LdapServerAdmin');
 // foreach($servers as $sid => $ldap_server) {
 //   $ldap_server->delete();
//  }
 // dpm('call ldap_servers_uninstall');
 // dpm(ldap_servers_schema());
//  drupal_uninstall_schema('ldap_servers');
  
}
/**
 * Implementation of hook_requirements().
 */
function ldap_servers_requirements($phase) {
  $requirements = array();
  $requirements['ldap_extension_loaded']['title'] = t('LDAP Extension Loaded');
  if(extension_loaded('ldap')) {
    $requirements['ldap_extension_loaded']['value'] = t('Passed');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_OK;
  } else {
    $requirements['ldap_extension_loaded']['value'] = t('Failed');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_ERROR;
    $requirements['ldap_extension_loaded']['description'] = t('No LDAP Extension is loaded for PHP, so LDAP will not work properly.');
  }
  
  // check that ldapauth not installed.
  return $requirements;
}

/**
 * Implementation of hook_schema().
 */
function ldap_servers_schema() {
   $schema['ldap_servers'] = array(
    'fields' => array(
      'sid' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' =>  array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
      ),
      'address' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'port' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 389,
      ),
      'tls' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'basedn' => array(
        'type' => 'text',
      ),
      'binddn' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'bindpw' => array(
        'type' => 'varchar',
        'length' => 255,
      ),        
        
      'user_attr' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'mail_attr' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),

      'ldap_to_drupal_user' =>  array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),

     'testing_drupal_username' =>  array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),

      'weight' =>  array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('sid'),
    'unique keys' => array('name' => array('name')),
  );
   
  return $schema;
  
 
}

