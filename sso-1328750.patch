diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 26b2a60..671db75 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,3 +1,4 @@
+Issue #1328750 by Gribnif.  Moved LDAP SSO to a separate module.  Details on issue queue item.
 11/22/2011 Coder Review formatting and tweaks.
 Issue #1328750. Not finished with issue, but added check for command line in hook_boot.  was breaking drush and other command line scripts.
 Issue #1317816 by johnbarclay.  LDAP Authorization simpletest was broken.  Improved authorization form directions.
diff --git a/ldap_authentication/LdapAuthenticationConf.class.php b/ldap_authentication/LdapAuthenticationConf.class.php
index 9f4b6b4..0b6324a 100644
--- a/ldap_authentication/LdapAuthenticationConf.class.php
+++ b/ldap_authentication/LdapAuthenticationConf.class.php
@@ -61,7 +61,6 @@ class LdapAuthenticationConf {
     'excludeIfTextInDn',
     'allowTestPhp',
     'excludeIfNoAuthorizations',
-    'ssoEnabled',
     'ssoRemoteUserStripDomainName',
     'seamlessLogin',
     'ldapImplementation',
@@ -97,6 +96,7 @@ class LdapAuthenticationConf {
       $this->inDatabase = FALSE;
     }
 
+    $this->ssoEnabled = module_exists('ldap_sso');
     $this->apiPrefs['requireHttps'] = variable_get('ldap_servers_require_ssl_for_credentails', 1);
     $this->apiPrefs['encryption'] = variable_get('ldap_servers_encryption', LDAP_SERVERS_ENC_TYPE_CLEARTEXT);
 
diff --git a/ldap_authentication/LdapAuthenticationConfAdmin.class.php b/ldap_authentication/LdapAuthenticationConfAdmin.class.php
index 31d2c47..9d11942 100644
--- a/ldap_authentication/LdapAuthenticationConfAdmin.class.php
+++ b/ldap_authentication/LdapAuthenticationConfAdmin.class.php
@@ -116,13 +116,16 @@ class LdapAuthenticationConfAdmin extends LdapAuthenticationConf {
       drupal_map_assoc(array(3600, 86400, 604800, 2592000, 31536000, 315360000), 'format_interval')
       + array(-1 => t('Never'));
 
-    $values['ssoEnabledDescription'] = t('Turning on Single Sign-On will enable ' .
+    $values['ssoEnabledDescription'] = '<strong>' . t('Single Sign on is enabled.') .
+      '</strong> ' . t('To disable it, disable the LDAP SSO Module on the ') .  l('Modules Form', 'admin/modules') . '.<p>' .
+      t('Single Sign-On enables ' .
       'users of this site to be authenticated by visiting the URL ' .
       '"user/login/sso, or automatically if selecting "automated ' .
       'single sign-on" below. Set up of LDAP authentication must be ' .
       'performed on the web server. Please review the !readme file ' .
       'for more information.', array('!readme' =>
-      l(t('README.txt'), drupal_get_path('module', 'ldap_authentication') . '/README.txt')));
+      l(t('README.txt'), drupal_get_path('module', 'ldap_sso') . '/README.txt')))
+      . '</p>';
 
     $values['ssoRemoteUserStripDomainNameDescription'] = t('Useful when the ' .
       'WWW server provides authentication in the form of user@realm and you ' .
@@ -222,6 +225,13 @@ class LdapAuthenticationConfAdmin extends LdapAuthenticationConf {
     variable_set('ldap_authentication_conf', $save);
   }
 
+  static public function getSaveableProperty($property) {
+    $ldap_authentication_conf = variable_get('ldap_authentication_conf', array());
+    debug($ldap_authentication_conf);
+    return isset($ldap_authentication_conf[$property]) ? $ldap_authentication_conf[$property] : FALSE;
+
+  }
+
   static public function uninstall() {
     variable_del('ldap_authentication_conf');
   }
@@ -430,19 +440,40 @@ class LdapAuthenticationConfAdmin extends LdapAuthenticationConf {
       '#collapsed' => (boolean)(!$this->ssoEnabled),
     );
 
-
+/**
     $form['sso']['ssoEnabled'] = array(
       '#type' => 'checkbox',
       '#title' => t('Enable Single Sign-On'),
       '#description' => t($this->ssoEnabledDescription),
       '#default_value' => $this->ssoEnabled,
+      '#disabled' => (boolean)(!module_exists('ldap_sso')),
+      );
+**/
+    if ($this->ssoEnabled) {
+
+      $form['sso']['enabled'] = array(
+        '#type' => 'markup',
+        '#markup' => $this->ssoEnabledDescription,
       );
 
+    }
+    else {
+      $form['sso']['disabled'] = array(
+       '#type' => 'markup',
+       '#markup' => '<p><em>' . t('LDAP Single Sign-On module must be enabled for options below to work.')
+       . ' ' . t('It is currently disabled.')
+        . ' ' .  l('Modules Form', 'admin/modules') . '</p></em>',
+     );
+
+
+
+    }
     $form['sso']['ssoRemoteUserStripDomainName'] = array(
       '#type' => 'checkbox',
       '#title' => t('Strip REMOTE_USER domain name'),
       '#description' => t($this->ssoRemoteUserStripDomainNameDescription),
       '#default_value' => $this->ssoRemoteUserStripDomainName,
+      '#disabled' => (boolean)(!$this->ssoEnabled),
     );
 
     $form['sso']['seamlessLogin'] = array(
@@ -450,6 +481,7 @@ class LdapAuthenticationConfAdmin extends LdapAuthenticationConf {
       '#title' => t('Turn on automated single sign-on'),
       '#description' => t($this->seamlessLogInDescription),
       '#default_value' => $this->seamlessLogin,
+      '#disabled' => (boolean)(!$this->ssoEnabled),
       );
 
     $form['sso']['cookieExpire'] = array(
@@ -458,6 +490,7 @@ class LdapAuthenticationConfAdmin extends LdapAuthenticationConf {
       '#description' => t($this->cookieExpireDescription),
       '#default_value' => $this->cookieExpire,
       '#options' => $this->cookieExpirePeriod,
+      '#disabled' => (boolean)(!$this->ssoEnabled),
     );
 
     $form['sso']['ldapImplementation'] = array(
@@ -466,6 +499,7 @@ class LdapAuthenticationConfAdmin extends LdapAuthenticationConf {
       '#description' => t($this->ldapImplementationDescription),
       '#default_value' => $this->ldapImplementation,
       '#options' => $this->ldapImplementationOptions,
+      '#disabled' => (boolean)(!$this->ssoEnabled),
     );
 
     $form['submit'] = array(
@@ -530,7 +564,7 @@ class LdapAuthenticationConfAdmin extends LdapAuthenticationConf {
     $this->excludeIfNoAuthorizations = ($values['excludeIfNoAuthorizations']) ? (int)$values['excludeIfNoAuthorizations'] : NULL;
     $this->emailOption  = ($values['emailOption']) ? (int)$values['emailOption'] : NULL;
     $this->emailUpdate  = ($values['emailUpdate']) ? (int)$values['emailUpdate'] : NULL;
-    $this->ssoEnabled = ($values['ssoEnabled']) ? (int)$values['ssoEnabled'] : NULL;
+   // $this->ssoEnabled = ($values['ssoEnabled']) ? (int)$values['ssoEnabled'] : NULL;
     $this->ssoRemoteUserStripDomainName = ($values['ssoRemoteUserStripDomainName']) ? (int)$values['ssoRemoteUserStripDomainName'] : NULL;
     $this->seamlessLogin = ($values['seamlessLogin']) ? (int)$values['seamlessLogin'] : NULL;
     $this->cookieExpire = ($values['cookieExpire']) ? (int)$values['cookieExpire'] : NULL;
diff --git a/ldap_authentication/README.txt b/ldap_authentication/README.txt
index d4dcd98..5a52932 100644
--- a/ldap_authentication/README.txt
+++ b/ldap_authentication/README.txt
@@ -38,118 +38,3 @@ else {
 }
 
 
-
-
-
-=======================================
-Single Sign-On
-=======================================
-
-
-To use the single sign-on feature, your web server must provide an authentication
-mechanism for LDAP. The only authentication mechanism used in development
-was mod_auth_sspi for Apache/Windows, but so long as the web server's LDAP
-authentication mechanism is configured to provide the $_SERVER variable
-$_SERVER['REMOTE_USER'] or $_SERVER['REDIRECT_REMOTE_USER'] corresponding
-directly to a user's LDAP user name, this should work all the same. This
-will require some sort of LDAP authentication mechanism; mod_auth_sspi is
-available here: http://mod-auth-sspi.sourceforge.net/, while mod_ntlm is
-available here: http://modntlm.sourceforge.net/, and mod_auth_ntlm_winbind is
-available here: http://samba.org/ftp/unpacked/lorikeet/mod_auth_ntlm_winbind/.
-If a Linux distribution is being used, Apache authentication modules are likely
-available within the distro's package manager.
-
-Unless an administrator wishes to require that all visitors be authenticated,
-NTLM and/or basic authentication should be set up only on the path
-user/login/sso, which will authentify the visitor but not deny access to view
-the site if the visitor is not authenticated. An administrator may wish to
-require LDAP authentication to view any portion of the site; this can be
-achieved by changing the location directive below to "/". An administrator may
-also wish to automatically log in visitors to Drupal; this can be achieved by
-checking "Turn on automated single sign-on" in the modules' configuration page.
-
-An example of an Apache configuration for a named virtualhost configuration
-using mod_auth_sspi on Windows is as follows:
-
-
-httpd.conf:
-_______________________________________________________________________________
-_______________________________________________________________________________
-
-
-
-
-# Virtual hosts
-Include conf/extra/httpd-vhosts.conf
-
-# Pass NTLM authentication to Apache
-LoadModule sspi_auth_module modules/mod_auth_sspi.so
-
-<IfModule !mod_auth_sspi.c>
-  LoadModule sspi_auth_module modules/mod_auth_sspi.so
-</IfModule>
-
-
-
-_______________________________________________________________________________
-_______________________________________________________________________________
-
-
-
-
-httpd-vhosts.conf:
-_______________________________________________________________________________
-_______________________________________________________________________________
-
-
-
-
-NameVirtualHost example.com
-
-<VirtualHost example.com>
-  DocumentRoot "D:/www/example.com/htdocs"
-  ServerName example.com
-
-  <directory "D:/www/example.com/htdocs">
-    Options Indexes FollowSymLinks MultiViews
-    AllowOverride All
-    Order Allow,Deny
-    Allow from all
-  </directory>
-
-  <Location /user/login/sso>
-    AuthType SSPI
-    AuthName "Example.com - Login using your LDAP user name and password"
-    SSPIAuth On
-    SSPIAuthoritative On
-    ### The domain used to authenticate with LDAP; this should match the domain
-    ### configured in the LDAP integration configuration within Drupal
-    SSPIDomain ad.example.com
-    SSPIOmitDomain On
-    SSPIOfferBasic On
-    Require valid-user
-    #SSPIBasicPreferred On
-    #SSPIofferSSPI off
-  </Location>
-</VirtualHost>
-
-_______________________________________________________________________________
-_______________________________________________________________________________
-
-
-After enabling and configuring an LDAP authentication module within Apache,
-visit user/login/sso in the Drupal installation on example.com. With or without
-the ldap sso feature enabled, the browser should prompt for a user name and
-password if using Internet Explorer 8 or a non-Microsoft browser. Internet
-Explorer 7 by default will pass NTLM authentication credentials to local
-websites, and IE8 and Firefox can be configured to do this as well.
-
-If prompted for credentials on that path, enter a valid LDAP user name,
-omitting the domain if "SSPIOmitDomain On" is configured, as well as a password.
-If the credentials are correct, or if NTLM credentials are passed automatically
-by the browser and successfully authenticated, a Drupal 404 "Page not found"
-message will be displayed if the module is not enabled; an "access is denied"
-message will be displayed if the module is enabled and the browser is already
-logged in; and if the ldap_sso module is fully configured and there is no
-existing session, the browser will display the message "You have been
-successfully authenticated" after redirecting to the sites' home page.
diff --git a/ldap_authentication/ldap_authentication.inc b/ldap_authentication/ldap_authentication.inc
index 932ebbc..b9ded24 100644
--- a/ldap_authentication/ldap_authentication.inc
+++ b/ldap_authentication/ldap_authentication.inc
@@ -472,95 +472,6 @@ function _ldap_authentication_user_login_authenticate_validate(&$form_state) {
 
 }
 
-/**
- * A proxy function for the actual authentication routine. This is in place
- * so various implementations of grabbing NTLM credentials can be used and
- * selected from an administration page. This is the real gatekeeper since
- * this assumes that any NTLM authentication from the underlying web server
- * is good enough, and only checks that there are values in place for the
- * user name, and anything else that is set for a particular implementation. In
- * the case that there is no credentials set by the underlying web server, the
- * user is redirected to the normal user login form.
- *
- * @return false
- */
-function _ldap_authentication_user_login_sso() {
-  $auth_conf = ldap_authentication_get_valid_conf();
-  $implementation = $auth_conf->ldapImplementation;
-  $enabled = $auth_conf->ssoEnabled;
-  if ($enabled == TRUE) {
-    switch ($implementation) {
-      case 'mod_auth_sspi' :
-        if (isset($_SERVER['REMOTE_USER']))
-          $remote_user = $_SERVER['REMOTE_USER'];
-        elseif (isset($_SERVER['REDIRECT_REMOTE_USER']))
-          $remote_user = $_SERVER['REDIRECT_REMOTE_USER'];
-        else
-          $remote_user = FALSE;
-        break;
-    }
-
-    if ($remote_user) {
-      if ($auth_conf->ssoRemoteUserStripDomainName) {
-        $exploded = explode('@', $remote_user);
-        if (count($exploded) == 2) {
-          $remote_user = $exploded[0];
-        }
-      }
-      watchdog('ldap_authentication', '%username : $_SERVER[\'REMOTE_USER\'] found',
-              array('%username' => $remote_user), WATCHDOG_DEBUG);
-      $fake_form_state = array(
-        'values' => array(
-          'name' => check_plain($remote_user),
-         'pass' => user_password(20),
-        ),
-        'sso_login' => TRUE,
-      );
-      $user = _ldap_authentication_user_login_authenticate_validate($fake_form_state);
-      if ($user && $user->uid > 0) {
-        if ($auth_conf->seamlessLogin == 1) {
-          setcookie("seamless_login", 'auto login', time() + $auth_conf->cookieExpire, base_path(), "");
-          $_SESSION['seamless_login'] = 'auto login';
-          setcookie("seamless_login_attempted", '');
-          unset($_SESSION['seamless_login_attempted']);
-
-      }
-      drupal_set_message(theme('ldap_authentication_login_message',
-                                  array('message' => t('You have been successfully authenticated'))));
-      drupal_goto('<front>');
-      }
-      else {
-        if ($auth_conf->seamlessLogin == 1) {
-          setcookie("seamless_login", 'do not auto login', time() + $auth_conf->cookieExpire, base_path(), "");
-          $_SESSION['seamless_login'] = 'do not auto login';
-      }
-      drupal_set_message(theme('ldap_authentication_message_not_found',
-          array('message' => t('Sorry, your LDAP credentials were not found, ' .
-          'or the LDAP server is not available. You may log in ' .
-           'with other credentials on the !user_login_form.',
-            array('!user_login_form' => l(t('user login form'), 'user/login'))))
-        ), 'error');
-      drupal_goto('user/login');
-      }
-    }
-    else {
-      watchdog('ldap_authentication', '$_SERVER[\'REMOTE_USER\'] not found', array(), WATCHDOG_DEBUG);
-      if ($auth_conf->seamlessLogin == 1) {
-        setcookie("seamless_login", 'do not auto login', time() + $auth_conf->cookieExpire, base_path(), "");
-        $_SESSION['seamless_login'] = 'do not auto login';
-      }
-      drupal_set_message(theme('ldap_authentication_message_not_authenticated',
-                                 array('message' =>
-                                     t('You were not authenticated by the server.
-                                       You may log in with your credentials below.')
-                                   )
-                                ), 'error');
-      drupal_goto('user/login');
-    }
-  }
-  else
-    drupal_goto('user/login');
-}
 
 
 function _ldap_authentication_err_text($error) {
diff --git a/ldap_authentication/ldap_authentication.install b/ldap_authentication/ldap_authentication.install
index 0925eea..c11fa0d 100644
--- a/ldap_authentication/ldap_authentication.install
+++ b/ldap_authentication/ldap_authentication.install
@@ -48,6 +48,22 @@ function ldap_authentication_uninstall() {
  * of what a cross grade function would do
  */
 
+
+/**
+ * ldap_authentication and ldap_sso.  enable ldap_sso if sso was enabled in ldap_authentication previously
+ */
+function ldap_authentication_update_7100() {
+  // if sso is enabled in ldap authentication, enable module ldap_sso
+  require_once(drupal_get_path('module', 'ldap_authentication') . '/LdapAuthenticationConfAdmin.class.php');
+  $ssoEnabled = LdapAuthenticationConfAdmin::getSaveableProperty('ssoEnabled');
+	if ($ssoEnabled) {
+		module_enable(array('ldap_sso'));
+		return t('Enabled new LDAP SSO module if Single Sign on was previously enabled.  Code for LDAP Single Sign On was moved to new "LDAP SSO" included module.');
+	}
+
+}
+
+
 function ldap_authentication_ldap_integration6_to_ldap7() {
 
  // fix authmaps
diff --git a/ldap_authentication/ldap_authentication.module b/ldap_authentication/ldap_authentication.module
index 83dcb13..53a0bff 100644
--- a/ldap_authentication/ldap_authentication.module
+++ b/ldap_authentication/ldap_authentication.module
@@ -66,13 +66,6 @@ function ldap_authentication_menu() {
     'file' => 'ldap_authentication.admin.inc',
   );
 
-  $items['user/login/sso'] = array(
-    'title' => 'Log In',
-    'page callback' => 'ldap_authentication_user_login_sso',
-    'access callback' => '_ldap_authentication_user_access',
-    'type' => MENU_NORMAL_ITEM,
-  );
-
   return $items;
 }
 
@@ -348,13 +341,6 @@ function ldap_authentication_login_form_submit(&$form, $form_state) {
 }
 
 
-
-function ldap_authentication_user_login_sso() {
-  require_once('ldap_authentication.inc');
-  _ldap_authentication_user_login_sso();
-}
-
-
 /**
  * Implements hook_user_logout().
  *
@@ -388,14 +374,12 @@ function ldap_authentication_boot() {
         else {
           $login_attempted = FALSE;
         }
-        //Full bootstrap needed to load common.inc for redirects and for ldap_authentication_get_valid_conf()
-        // to function.
-        drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
-        $auth_conf = ldap_authentication_get_valid_conf();
-        if ( $auth_conf && $auth_conf->seamlessLogin == 1 && ($login_attempted != 'true')) {
+        require_once(drupal_get_path('module', 'ldap_authentication') . '/LdapAuthenticationConfAdmin.class.php');
+        $seamlessLogin = LdapAuthenticationConfAdmin::getSaveableProperty('seamlessLogin');
+        if ( $seamlessLogin == 1 && ($login_attempted != 'true')) {
           setcookie("seamless_login_attempted", 'true', time() + (int)$auth_conf->cookieExpire, base_path(), "");
           $_SESSION['seamless_login_attempted'] = $login_attempted;
-
+          drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
           drupal_goto('user/login/sso', array('query' => array('destination' => rawurlencode($_GET['q']))));
         }
         else {
