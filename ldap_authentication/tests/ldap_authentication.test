<?php
// $Id:$


/**
 * @file test stub
 *
 */
require_once(drupal_get_path('module', 'ldap_servers') . '/tests/LdapTestFunctions.class.php');

class LdapAuthenticationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'LDAP Authentication Tests',
      'description' => 'Test ldap authentication.',
      'group' => 'LDAP Authentication'
    );
  }

  public $module_name = 'ldap_authentication';
  public $testFunctions;

  function setUp() {
    parent::setUp(array('ldap_authentication')); // don't need any real servers, configured, just ldap_servers code base
    variable_set('ldap_simpletest', 1);
    variable_set('ldap_help_watchdog_detail', 0);
  }


  function tearDown(){
    parent::tearDown();
    variable_del('ldap_help_watchdog_detail');
    variable_del('ldap_simpletest');
  }


  /**
   * prepTestData create an ldap_authorization configuration and stores fake ldap server configuration.
   *
   * @param string $testid the name of the test.  used to determine which configuration file to include
   * @return object consumer configuration object (class = LdapAuthorizationConsumerConfAdmin)
   *
   */
  function prepTestData($sid, $testid) {
    $this->testFunctions = new LdapTestFunctions();

    include(drupal_get_path('module','ldap_authentication') . '/tests/LdapServerTestData.' .$sid . '.inc');
    $this->testFunctions->prepTestServers($sid,  $test_data['server']);

    $authentication_conf = (is_array($testid)) ? $testid : $test_data['ldap_authentication'][$testid];
    $this->testFunctions->configureAuthentication($authentication_conf);

  }


  function removeTestData($sid, $testid) {
    include(drupal_get_path('module','ldap_authentication') . '/tests/LdapServerTestData.' . $sid . '.inc');
    $this->testFunctions->removeTestServers($sid);
  }


  /**
   * difficult to test install and uninstall since setUp does module enabling and installing.
   */
  function testInstall() {
    $sid = 'ldapauthen1';
    include(drupal_get_path('module','ldap_authentication') . '/tests/LdapServerTestData.' . $sid . '.inc');
    $testid = $this->module_name . ': setup success';
    // just to give warning if setup doesn't succeed.  may want to take these out at some point.

    $setup_success = (
        module_exists('ldap_authentication') &&
        module_exists('ldap_servers')
      );

    $this->assertTrue($setup_success, ' ldap_authentication setup successful', $testid);

  }


/**
 *  LDAP Authentication Mixed Mode User Logon Test (ids = LDAP_authen.MM.ULT.*)
**/


  function testMixedModeUserLogon() {

    $sid = 'ldapauthen1';
    $testid = 'MixedModeUserLogon';
    $this->prepTestData($sid, $testid);
    $ldap_servers = ldap_servers_get_servers($sid, 'enabled');
    $this->assertTrue(count($ldap_servers) == 1, ' ldap_authentication test server setup successful', $testid);

    /**
     * LDAP_authen.MM.ULT.user1.goodpwd -- result: Successful logon as user 1
     */

    $user1 = user_load(1);
    $password = $this->randomString(20);
    require_once('includes/password.inc');
    $account = array(
      'name' => $user1->name,
      'pass' => user_hash_password(trim($password)),
    );
    db_update('users')
      ->fields($account)
      ->condition('uid', 1)
      ->execute();

    $edit = array(
      'name' => $user1->name,
      'pass' => $password,
    );

   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Member for'),'User 1 successfully authenticated', $testid);
   $this->drupalGet('user/logout');

   /** LDAP_authen.MM.ULT.user1.badpwd  -- result: Drupal logon error message. **/

    $edit = array(
      'name' => $user1->name,
      'pass' => 'mydabpassword',
    );

   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Sorry, unrecognized username or password'), 'User 1 failed with bad password', $testid);
   $this->drupalLogout();

   /** LDAP_authen.MM.ULT.drupal.goodpwd - result: Successful logon **/

   $drupal_user = $this->drupalCreateUser();
   $raw_pass = $drupal_user->pass_raw;
   $edit = array(
      'name' => $drupal_user->name,
      'pass' => $raw_pass,
    );
   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Member for'),'Drupal user successfully authenticated', $testid);
   $this->drupalGet('user/logout');

   /** LDAP_authen.MM.ULT.drupal.badpwd - result: Drupal logon error message. **/
   $edit = array(
      'name' => $drupal_user->name,
      'pass' => 'mydabpassword',
    );
   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Sorry, unrecognized username or password'),'Drupal user with bad password failed to authenticate.', $testid);
   $this->drupalGet('user/logout');

    /** LDAP_authen.MM.ULT.ldap.newaccount.badpwd - result: Drupal logon error message. **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'mydabpassword',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Sorry, unrecognized username or password'),'New Ldap user with bad password failed to authenticate.', $testid);
    $this->drupalGet('user/logout');


    /** LDAP_authen.MM.ULT.ldap.newaccount.goodpwd - result: Successful logon, with user record created and authmapped to ldap **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'goodpwd',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Member for'),'New Ldap user with good password authenticated.');
    $this->assertTrue($this->testFunctions->ldapUserIsAuthmapped('jkool'), 'Ldap user properly authmapped.', $testid);
    $this->drupalGet('user/logout');


    /** LDAP_authen.MM.ULT.existingacct.badpwd - result: Drupal logon error message. **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'mydabpassword',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Sorry, unrecognized username or password'),'Existing Ldap user with bad password failed to authenticate.', $testid);
    $this->drupalGet('user/logout');

    /** LDAP_authen.MM.ULT.existingacct.goodpwd - result: Successful logon. **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'goodpwd',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Member for'),'Existing Ldap user with good password authenticated.');
    $this->assertTrue($this->testFunctions->ldapUserIsAuthmapped('jkool'), 'Existing Ldap user still properly authmapped.', $testid);
    $this->drupalGet('user/logout');
  }


/**
 *  LDAP Authentication Exclusive Mode User Logon Test (ids = LDAP_authen.EM.ULT.*)
**/
 function testExclusiveModeUserLogon() {

    $sid = 'ldapauthen1';
    $testid = 'ExclusiveModeUserLogon';
    $this->prepTestData($sid, $testid);
    $ldap_servers = ldap_servers_get_servers($sid, 'enabled');
    $this->assertTrue(count($ldap_servers) == 1, ' ldap_authentication test server setup successful', $testid);

    /**
     * LDAP_authen.EM.ULT.user1.goodpwd -- result: Successful logon as user 1
     */

    $user1 = user_load(1);
    $password = $this->randomString(20);
    require_once('includes/password.inc');
    $account = array(
      'name' => $user1->name,
      'pass' => user_hash_password(trim($password)),
    );
    db_update('users')
      ->fields($account)
      ->condition('uid', 1)
      ->execute();

    $edit = array(
      'name' => $user1->name,
      'pass' => $password,
    );

   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Member for'), 'User 1 successfully authenticated', $testid);
   $this->drupalGet('user/logout');

   /** LDAP_authen.EM.ULT.user1.badpwd  -- result: Drupal logon error message. **/

    $edit = array(
      'name' => $user1->name,
      'pass' => 'mydabpassword',
    );

   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Sorry, unrecognized username or password'),  'User 1 failed with bad password', $testid );
   $this->drupalLogout();

   /** LDAP_authen.EM.ULT.drupal.goodpwd - result: failed logon **/

   $drupal_user = $this->drupalCreateUser();
   $raw_pass = $drupal_user->pass_raw;
   $edit = array(
      'name' => $drupal_user->name,
      'pass' => $raw_pass,
    );
   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Sorry, unrecognized username or password'),'Drupal user successfully authenticated', $testid );
   $this->drupalGet('user/logout');

   /** LDAP_authen.EM.ULT.drupal.badpwd - result: Drupal logon error message. **/
   $edit = array(
      'name' => $drupal_user->name,
      'pass' => 'mydabpassword',
    );
   $this->drupalPost('user', $edit, t('Log in'));
   $this->assertText(t('Sorry, unrecognized username or password'),'Drupal user with bad password failed to authenticate.', $testid );
   $this->drupalGet('user/logout');

    /** LDAP_authen.EM.ULT.ldap.newaccount.badpwd - result: Drupal logon error message. **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'mydabpassword',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Sorry, unrecognized username or password'),'New Ldap user with bad password failed to authenticate.', $testid );
    $this->drupalGet('user/logout');


    /** LDAP_authen.EM.ULT.ldap.newaccount.goodpwd - result: Successful logon, with user record created and authmapped to ldap **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'goodpwd',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Member for'),'New Ldap user with good password authenticated.');
    $this->assertTrue($this->testFunctions->ldapUserIsAuthmapped('jkool'), 'Ldap user properly authmapped.', $testid );
    $this->drupalGet('user/logout');


    /** LDAP_authen.EM.ULT.existingacct.badpwd - result: Drupal logon error message. **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'mydabpassword',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Sorry, unrecognized username or password'),'Existing Ldap user with bad password failed to authenticate.', $testid );
    $this->drupalGet('user/logout');

    /** LDAP_authen.MM.ULT.existingacct.goodpwd - result: Successful logon. **/
    $edit = array(
      'name' => 'jkool',
      'pass' => 'goodpwd',
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Member for'),'Existing Ldap user with good password authenticated.');
    $this->assertTrue($this->testFunctions->ldapUserIsAuthmapped('jkool'), 'Existing Ldap user still properly authmapped.', $testid );
    $this->drupalGet('user/logout');
  }

/**
 *
==============================================
Whitelist Tests (WL)
-----------------------
key:

- allow[match], exclude[match] = text match allowed of excluded list
- allow[miss], exclude[miss]   = no match
- php[true], php[false] = php evaluates to true or false

-----------------------
Tests:
-----------------------
single option used in whitelists:
LDAP_authen.WL.allow[match] -- authenticate success
LDAP_authen.WL.allow[miss] -- authenticate fail
LDAP_authen.WL.exclude[match] -- authenticate fail
LDAP_authen.WL.exclude[miss] -- authenticate success
LDAP_authen.WL.php[true] -- authenticate success
LDAP_authen.WL.php[false] -- authenticate fail

multiple options used in whitelist:
LDAP_authen.WL.allow[match].exclude[match] -- authenticate fail
LDAP_authen.WL.allow[match].exclude[miss] -- authenticate success
LDAP_authen.WL.exclude[match].* - authenticate fail
LDAP_authen.WL.exclude[match].php[false] - authenticate fail
LDAP_authen.WL.php[false].* - authenticate fail

==============================================
Account Conflict Tests (AC) from "Existing Drupal User Account Conflict"
-----------------------
key:

disallow and allow: option selected
drupal - username exists as non ldap associated drupal account
ldap - username exists in ldap
noconflict1.  drupal user exists, but is ldap associated (authmapped)
conflict.  a non ldap drupal account exists and the username if found in ldap

-----------------------
Tests:
-----------------------
LDAP_authen.AcctConflict.disallow.drupal - no conflict, no action taken
LDAP_authen.AcctConflict.disallow.ldap - no conflict, no action taken
LDAP_authen.AcctConflict.disallow.ldap.drupal - conflict logged and user authentication fails
LDAP_authen.AcctConflict.allow.drupal - no conflict, no action taken
LDAP_authen.AcctConflict.allow.ldap - no conflict, no action taken
LDAP_authen.AcctConflict.allow.ldap.drupal - user authmapped to ldap

==============================================
Account Creation Tests (ACreate) from "Existing Drupal User Account Conflict"
-----------------------

Test by logging in with LDAP authenticated user with no existing account.

LDAP_authen.AcctCreate.user_settings.Admin -- desired result:  no account created, user fails to logon
LDAP_authen.AcctCreate.user_settings.Visitors -- desired result:  acount created and ldap authmapped
LDAP_authen.AcctCreate.user_settings.AdminWithApproval -- desired result:  no account created, user fails to logon.  Acount should be created via account request form
LDAP_authen.AcctCreate.ldap -- desired result:  acount created and ldap authmapped

================================================
User Forms User Interface (UFUI) Tests
================================================
setup:

1. Toggle email user interface options on admin/config/people/ldap/authentication
  EMAIL=hide
  EMAIL=disable

2. Toggle register accounts account settings at admin/config/accounts/settings
  REGACCT.admin
  REGACCT.visitors
  REGACCT.visitors_w_approv

3. Try with 4 types of users:
  anon = anonymous user
  user1 = authenticated user 1
  drupal = authenticated drupal user
  ldap = authenticated ldap user
-------------------------
Tests and Desired Results
-------------------------
Edit User Profile Form (/user/NN/edit), form id = user_profile_form
-------------------------
LDAP_authen.user_profile_form.user1.password -- result: password fields and email address fields visible
LDAP_authen.user_profile_form.drupal.password -- result: password fields visible
LDAP_authen.user_profile_form.ldap.password -- result: password fields hidden


LDAP_authen.user_profile_form.EMAIL=allow.* email field functions -- result: email field visible for all users
LDAP_authen.user_profile_form.EMAIL=hide.ldap email field hidden -- result: email field hidden for ldap users
LDAP_authen.user_profile_form.EMAIL=disable.ldap -- result: email field disabled but visible for ldap users

-------------------------
User Logon block and logon forms (/user ), form_id = user_login_block and form_id = user_login
-------------------------

LDAP_authen.login_forms.MM.anon  -- result: visible request new password link
LDAP_authen.login_forms.EM.anon  -- result: hidden link or link to ldap help page

** note:  Create new account link available based on user settings at admin/config/accounts/settings
and not controlled by ldap module at all.

-------------------------
Password Reset/Request New Form (user/password), form id = user_pass
-------------------------
LDAP_authen.reset.anon -- result: form visible from url for all anonymous users
LDAP_authen.reset.anon.EM  -- result: warning if ldap exclusive mode saying only works/available for user 1/admin and link to user ldap help page if link exists
LDAP_authen.reset.ldap.validation.ldap -- result: validation error thrown if resetting password of ldap authenticated user
LDAP_authen.reset.validation.user1 -- result: successfully able to reset password.

-------------------------
User Register Form (user/register), form id = user_register_form
- controlled by admin/config/accounts/settings and not affected by ldap modules.




**/
}
