<?php
// $Id$

/**
 * @file
 * This module injects itself into Drupal's Authentication stack.
 */

/**
 * Implementation of hook_init().
 */
function ldap_authentication_init() {
}

/**
 * Implementation of hook_theme().
 */
function ldap_authentication_theme() {
}

/**
 * Implementation of hook_menu().
 */
function ldap_authentication_menu() {
  $items = array();
  $items['admin/settings/ldap/authentication'] = array(
    'title' => 'Authentication',
    'description' => 'Configure LDAP Authentication',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ldap_authentication.admin.inc',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'weight' => 1,
  );
  $items['admin/settings/ldap/servers/%/authentication'] = array(
    'title' => 'Authentication',
    'description' => 'Change per-server authentication options.',
    'type' => MENU_LOCAL_TASK,
    'file' => 'ldap_authentication.admin.inc',
    'page callback' => 'ldap_authentication_edit_server',
    'access arguments' => array('Add/Edit LDAP Servers'),
    'weight' => 1,
  );
  return $items;
}

/**
 * Implementation of hook_help().
 */
function ldap_authentication_help($path, $arg) {
  switch ($path) {
    case 'admin/ldap/authentication':
      $output = '<p>'. t('Some help text goes here.') .'</p>';
      return $output;

    case 'admin/help#ldap_authentication':
      $output = '<p>'. t('LDAP can also provide Authentication.') .'</p>';
      return $output;
  }
}

/**
  * Implementation of hook_info().
  */
function ldap_authentication_info($field = 0) {
  $info['name']= 'ldap_authentication';
  $info['protocol'] = 'LDAP';

  if ($field) {
    return $info[$field];
  }

  return $info;
}

/**
  * Implementation of hook_user().
  */
function ldap_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'update':
      if ($category == 'account' && isset($account->ldap_authentified)) {
        // LDAP Authentication is NEVER to be cached in Drupal's DB.
        $edit['pass'] = user_password();
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ldap_authenticate_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_block':
    case 'user_login':
      $form['#validate'] = array('ldap_authentication_login_authenticate_validate');
      break;
    case 'user_register':
      if (isset($_SESSION['ldap']['values'])) {
        // Auto-registration failed, attempt to prefill fields.
        $form['name']['#default_value'] = $_SESSION['ldap']['values']['name'];
        $form['mail']['#default_value'] = $_SESSION['ldap']['values']['mail'];
      }
      break;
  }
  return $form;
}

/**
 * Replacement for user_authenticate_validate().
 */
function ldap_authentication_login_authenticate_validate($form, &$form_state) {
  ldap_authenticate($form_state['values']);
}


/**
 * Authenticate a user or attempt registration.
 */
function ldap_authentication($user, $form_values = array()) {
  global $user;

  $uid = $form_values['name'];
  $passwd = trim($form_values['pass']);

  // Search for user using authmap
  $account = user_external_load($identity);

  //But failover to Drupal internal
  if ($account = 0) {
    $account = user_load($identity);
  }

  if (isset($account->uid)) {
    if (!variable_get('user_email_verification', TRUE) || $account->login) {
      user_external_login($account, $_SESSION['ldap']['user_login_values']);
    }
    else {
      drupal_set_message(t('You must validate your email address for this account before logging.'));
    }
  }
  elseif (variable_get('user_register', 1)) {
    // Get Info from LDAP
    $response = _ldap_authentication_user_load()

    // Register new user
    $form_state['redirect'] = NULL;
    $form_state['values']['name'] = 
    $form_state['values']['mail'] = (empty($response['openid.sreg.email'])) ? '' : $response['openid.sreg.email'];
    $form_state['values']['pass']  = user_password();
    $form_state['values']['status'] = variable_get('user_register', 1) == 1;
    $form_state['values']['response'] = $response;
    $form_state['values']['auth_openid'] = $identity;

    if (empty($response['openid.sreg.email']) && empty($response['openid.sreg.nickname'])) {
      drupal_set_message(t('Please complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');
      $success = FALSE;
    }
    else {
      $form = drupal_retrieve_form('user_register', $form_state);
      drupal_prepare_form('user_register', $form, $form_state);
      drupal_validate_form('user_register', $form, $form_state);
      $success = !form_get_errors();
      if (!$success) {
        drupal_set_message(t('Account registration using the information provided by your OpenID provider failed due to the reasons listed below. Please complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');
        // Append form validation errors below the above warning.
        $messages = drupal_get_messages('error');
        foreach ($messages['error'] as $message) {
          drupal_set_message( $message, 'error');
        }
      }
    }
    if (!$success) {
      // We were unable to register a valid new user, redirect to standard
      // user/register and prefill with the values we received.
      $_SESSION['openid']['values'] = $form_state['values'];
      // We'll want to redirect back to the same place.
      $destination = drupal_get_destination();
      unset($_REQUEST['destination']);
      drupal_goto('user/register', $destination);
    }
    else {
      unset($form_state['values']['response']);
      $account = user_save('', $form_state['values']);
      // Terminate if an error occured during user_save().
      if (!$account) {
        drupal_set_message(t("Error saving user account."), 'error');
        drupal_goto();
      }
      user_external_login($account);
    }
    drupal_redirect_form($form, $form_state['redirect']);
  }
  else {
    drupal_set_message(t('Only site administrators can create new user accounts.'), 'error');
  }
  drupal_goto();
}




// vim:fenc=utf-8:ft=php:ai:si:ts=2:sw=2:et:
