<?php
// $Id$

/**
 * @file
 * This module injects itself into Drupal's Authentication stack.
 */

/**
 * @todo fix advanced help for ../ldap/authentication settings page
 * @todo ldapUsersRequireAdminApproval is in the config, but is not implemented
 * @todo ldapUsersDontCreateAutomatically is in the config, but is not implemented
 * @todo the ability for an admin to create an account and tag it as ldap
 *       this would just need an extension to the user admin interface and some more permissions
     
 * 
 */
define('LDAP_AUTHENTICATION_PROJECT_TAG', 'ldap');

define('LDAP_AUTHENTICATION_MIXED',           1);
define('LDAP_AUTHENTICATION_EXCLUSIVE',      2);

define('LDAP_AUTHENTICATION_CONFLICT_LOG',         1);
define('LDAP_AUTHENTICATION_CONFLICT_RESOLVE',    2);

define('LDAP_AUTHENTICATION_EMAIL_ALLOW_DRUPAL_EMAIL',      1);
define('LDAP_AUTHENTICATION_EMAIL_FIELD_REMOVE',   2);
define('LDAP_AUTHENTICATION_EMAIL_FIELD_DISABLE',  3);



/**
 * Implementation of hook_menu().
 */
function ldap_authentication_menu() {
  $items = array();

  $items['admin/config/people/ldap/authentication'] = array(
    'title' => t('3. Authentication'),
    'description' => t('Configure LDAP Authentication'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_authentication_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'ldap_authentication.admin.inc',
  );
  
  return $items;
}

 
/**
 * Implementation of hook_help().
 */

function ldap_authentication_help($path, $arg) {
  switch ($path) {
    case 'admin/config/people/ldap/authentication':
      $output = '<p>'. t('Some help text goes here.') .'</p>';
      return $output;

    case 'admin/help#ldap_authentication':
      $output = '<p>'. t('LDAP can also provide Authentication.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_info().
 */
function ldap_authentication_info($field = 0) {
  $info['name']= 'ldap_authentication';
  $info['protocol'] = 'LDAP';

  if ($field) {
    return $info[$field];
  }

  return $info;
}

/**
 * get LdapAuthenticationConf object
 *
 * @return object LdapAuthenticationConf object if configured, otherwise FALSE
 * 
 */

function ldap_authentication_get_valid_conf() {
  static $auth_conf;
  if (is_object($auth_conf)) {
    return $auth_conf;
  }
  require_once('LdapAuthenticationConf.class.php');
  $auth_conf = new LdapAuthenticationConf();
  return ($auth_conf->inDatabase) ? $auth_conf : FALSE;

}

/**
 * Implementation of hook_menu_alter().
 */
function ldap_authentication_menu_alter(&$items) {
  if ($auth_conf = ldap_authentication_get_valid_conf()) {
    if ($auth_conf->logonFormHideCreateAccount) {
      unset($items['user/password']);
    }
    if ($auth_conf->logonFormHideResetPassword) {
      unset($items['user/register']);
    } 
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ldap_authentication_form_alter(&$form, $form_state, $form_id) {

}


/**
 * Implementation of hook_form_FORM_ID_alter() for user_register
 */

function ldap_authentication_form_user_register_alter(&$form, $form_state) {
  
}

/**
 * Implementation of hook_form_FORM_ID_alter() for user_profile_form
 */
function ldap_authentication_form_user_profile_form_alter(&$form, $form_state) {
  require_once('ldap_authentication.inc');
  _ldap_authentication_form_user_profile_form_alter($form, $form_state, 'user_login');
  
}


/**
 * Implementation of hook_form_FORM_ID_alter() for user_login
 */
function ldap_authentication_form_user_login_alter(&$form, &$form_state) {
  require_once('ldap_authentication.inc');
  _ldap_authentication_login_form_alter($form, $form_state, 'user_login');
  
}

/**
 * Implementation of hook_form_FORM_ID_alter() for user_login_block
 */
function ldap_authentication_form_user_login_block_alter(&$form, &$form_state) {
  require_once('ldap_authentication.inc');
  _ldap_authentication_login_form_alter($form, $form_state, 'user_login_block');
  
}

/**
 * validate function for user logon forms.
*/
function ldap_authentication_user_login_authenticate_validate($form, &$form_state) {
  require_once('ldap_authentication.inc');
  _ldap_authentication_user_login_authenticate_validate($form_state);
}

/**
 * submit function for user logon forms
 */
function ldap_authentication_login_form_submit(&$form, $form_state) {
  require_once('ldap_authentication.inc');
  _ldap_authentication_login_form_submit($form, $form_state);

}



/**
 * Implements hook_user_login().
 *
 * The user just logged in.
 * 
 */

function ldap_authentication_user_login(&$edit, $account) {
  
}


/**
 * Implements hook_user_presave().
 *  A user account is about to be created or updated.
 */

function ldap_authentication_user_presave(&$edit, $account, $category = NULL) {
  
}


/**
 * Implements hook_user_insert().
 *
 * A user account was created.
 * The module should save its custom additions to the user object into the database.
 */

function ldap_authentication_user_insert(&$edit, $account, $category) {
  
}


/**
 *  Implements hook_user_update().
 *  
 *  A user account was updated.
 *  Modules may use this hook to update their user data in a custom storage after a user account has been updated.
 */


function ldap_authentication_user_update($edit, $user, $category) {
  
}


